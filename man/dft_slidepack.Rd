% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slide_template.R
\name{dft_slidepack}
\alias{dft_slidepack}
\title{An R Markdown output format for remark.js slides}
\usage{
dft_slidepack(css = c("default", "dft"), nature = list(), ...)
}
\arguments{
\item{css}{A vector of CSS file paths. Three default CSS files
(\file{default.css}, \file{default-fonts.css} and \file{dft.css}) are provided in this
package.

To add custom css files to your slidepack, you can add a reference to the 
css file in this character vector e.g., for \code{css = c('default', 'extra.css')}).}

\item{nature}{(Nature transformation) A list of configurations to be passed
to \code{remark.create()}, e.g. \code{list(ratio = '16:9', navigation =
list(click = TRUE))}; see
\url{https://github.com/gnab/remark/wiki/Configuration}. Besides the
options provided by remark.js, you can also set \code{autoplay} to a number
(the number of milliseconds) so the slides will be played every
\code{autoplay} milliseconds; alternatively, \code{autoplay} can be a list
of the form \code{list(interval = N, loop = TRUE)}, so the slides will go
to the next page every \code{N} milliseconds, and optionally go back to the
first page to restart the play when \code{loop = TRUE}. You can also set
\code{countdown} to a number (the number of milliseconds) to include a
countdown timer on each slide. If using \code{autoplay}, you can optionally
set \code{countdown} to \code{TRUE} to include a countdown equal to
\code{autoplay}. To alter the set of classes applied to the title slide,
you can optionally set \code{titleSlideClass} to a vector of classes; the
default is \code{c("center", "middle", "inverse")}.}

\item{...}{arguments passed to rmarkdown HTML format.}
}
\description{
This output format produces an HTML file that contains the Markdown source
(knitted from R Markdown) and JavaScript code to render slides.
}
\examples{
# rmarkdown::render('foo.Rmd', 'slidepackR::dft_slidepack')
}
